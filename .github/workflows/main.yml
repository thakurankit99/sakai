name: Sakai 23 CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Enter the branch name to deploy (e.g., 23.x)"
        required: true
        default: "23.x"

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Sakai Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch_name }}

      - name: Verify Parent POM Exists
        run: |
          if [ ! -f master/pom.xml ]; then
            echo "‚ùå master/pom.xml not found! Ensure it exists in the selected branch."
            exit 1
          else
            echo "‚úÖ master/pom.xml found."
          fi

      - name: Set Up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"
          architecture: x64

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Master Project (First Step)
        run: |
          cd master
          mvn clean install -Dmaven.test.skip=true

      - name: Build Root Project (Final Step)
        run: |
          mvn clean install -Dmaven.test.skip=true

      - name: Debug Build Output
        run: |
          echo "üîç Listing all `.war` files..."
          find . -name "*.war" -exec ls -lh {} \;

      - name: Verify Component Manager Exists
        run: |
          if [ ! -d "components/sakai-component-manager-23-SNAPSHOT/lib" ]; then
            echo "‚ùå Missing sakai-component-manager-23-SNAPSHOT/lib"
            exit 1
          else
            echo "‚úÖ Component manager found."
          fi

      - name: Deploy Sakai WAR
        run: |
          mvn sakai:deploy \
            -Dmaven.tomcat.home=$CATALINA_HOME \
            -Dsakai.home=$CATALINA_HOME/sakai \
            -Djava.net.preferIPv4Stack=true \
            -Dmaven.cleanup=false

      - name: Verify WAR File Exists
        run: |
          if ! find . -name "sakai.war" | grep -q "."; then
            echo "‚ùå Build failed! No sakai.war found."
            exit 1
          else
            echo "‚úÖ Build succeeded, sakai.war found."
          fi

      - name: Copy `sakai.war` for Artifact Upload
        run: |
          find . -name "sakai.war" -exec cp {} ./sakai.war \;

      - name: Upload `sakai.war` as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sakai-war
          path: ./sakai.war
          compression-level: 0

  docker:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository (For Dockerfile)
        uses: actions/checkout@v4

      - name: Download `sakai.war` from Artifact
        uses: actions/download-artifact@v4
        with:
          name: sakai-war

      - name: Checkout `sakaiprops` Repository (Fetch `sakai.properties`)
        uses: actions/checkout@v4
        with:
          repository: thakurankit99/sakaiprops
          ref: main
          token: ${{ secrets.SAKAIPROPS_PAT }}

      - name: Move `sakai.properties` Into Correct Location
        run: |
          mkdir -p /opt/tomcat/sakai
          mv sakai.properties /opt/tomcat/sakai/sakai.properties

      - name: Build Docker Image (With Correct `sakai.properties` Path)
        run: |
          echo "‚úÖ Building Docker image..."
          docker build -t ankitosm/sakai:${{ github.event.inputs.branch_name }} .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: |
          echo "‚úÖ Pushing Docker image..."
          docker push ankitosm/sakai:${{ github.event.inputs.branch_name }}

  deploy:
    needs: docker
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "üîÑ Pulling latest Sakai image..."
            docker pull ankitosm/sakai:${{ github.event.inputs.branch_name }}
            
            echo "üîÑ Ensuring Docker network exists..."
            docker network create sakai_default || true
            
            echo "üõë Stopping existing Sakai container..."
            docker stop sakai-app || true
            
            echo "üóë Removing old Sakai container..."
            docker rm sakai-app || true

            echo "üöÄ Running Sakai container..."
            docker run -d --name sakai-app --network=sakai_default -p 8080:8080 ankitosm/sakai:${{ github.event.inputs.branch_name }}
            
            echo "‚úÖ Deployment complete! Sakai should be running on http://${{ secrets.VPS_HOST }}:8080"
