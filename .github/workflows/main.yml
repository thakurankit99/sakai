name: Sakai 23 CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Enter the branch name to deploy (e.g., 23.x)"
        required: true
        default: "23.x"

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Sakai Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch_name }}

      - name: Set Up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"
          architecture: x64

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Parent POM First
        run: |
          echo "üîß Building parent POM (master)..."
          mvn -q clean install -N
          mvn -q clean install -pl master -am -DskipTests

      - name: Build Sakai (Quiet Mode)
        run: |
          echo "üîß Building Sakai in quiet mode..."
          mvn -q clean install -Dmaven.test.skip=true -U -Dorg.slf4j.simpleLogger.defaultLogLevel=error | tee build.log | grep -E "ERROR|WARN|BUILD SUCCESS|BUILD FAILURE" || true

      - name: Debug Last 50 Lines if Build Fails
        if: failure()
        run: |
          echo "‚ùå Build failed! Showing last 50 lines of logs for debugging..."
          tail -n 50 build.log

      - name: Collect All WAR Files
        run: |
          echo "üîç Collecting all .war files..."
          mkdir -p sakai-webapps
          find . -name "*.war" -exec cp {} sakai-webapps/ \;
          ls -lah sakai-webapps | tee collected_wars.log

      - name: Upload WAR Files as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sakai-wars
          path: sakai-webapps/
          compression-level: 0

  docker:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository (For Dockerfile)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.inputs.branch_name }}

      - name: Download All WAR Files
        uses: actions/download-artifact@v4
        with:
          name: sakai-wars
          path: sakai-webapps/

      - name: Checkout sakaiprops Repository
        uses: actions/checkout@v4
        with:
          repository: thakurankit99/sakaiprops
          ref: main
          token: ${{ secrets.SAKAIPROPS_PAT }}
          path: sakaiprops

      - name: Prepare sakaiprops Files for Docker Build
        run: |
          cp sakaiprops/apache-tomcat-9.0.69.tar.gz ./
          cp sakaiprops/sakai.properties ./
          cp sakaiprops/context.xml ./
          cp sakaiprops/server.xml ./
          cp sakaiprops/mysql-connector-j-8.4.0.tar.gz ./

      - name: Build Docker Image
        run: |
          echo "‚úÖ Building Docker image..."
          docker build --no-cache -t ankitosm/sakai:${{ github.event.inputs.branch_name }} .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: |
          echo "‚úÖ Pushing Docker image..."
          docker push ankitosm/sakai:${{ github.event.inputs.branch_name }}

  deploy:
    needs: docker
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "üîÑ Pulling latest Sakai image..."
            docker pull ankitosm/sakai:${{ github.event.inputs.branch_name }}

            echo "üîÑ Ensuring Docker network exists..."
            docker network create sakai_default || true

            echo "üõë Stopping existing Sakai container..."
            docker stop sakai-app || true
            docker rm sakai-app || true

            echo "üîÑ Setting up sakaiprops..."
            rm -rf ~/sakaiprops || true
            mkdir -p ~/sakai
            git clone https://${{ secrets.SAKAIPROPS_PAT }}@github.com/thakurankit99/sakaiprops.git ~/sakaiprops
            cp ~/sakaiprops/sakai.properties ~/sakai/sakai.properties
            cp ~/sakaiprops/context.xml ~/sakai/context.xml
            cp ~/sakaiprops/server.xml ~/sakai/server.xml
            cp ~/sakaiprops/mysql-connector-j-8.4.0.tar.gz ~/sakai/

            echo "üîÑ Extracting MySQL Connector..."
            tar -xvzf ~/sakai/mysql-connector-j-8.4.0.tar.gz -C ~/sakai/
            find ~/sakai/ -name "*.jar" -exec mv {} ~/sakai/ \;

            echo "üöÄ Starting new Sakai container..."
            docker run -d --name sakai-app \
              --network=sakai_default \
              -p 8080:8080 \
              -v ~/sakai/sakai.properties:/opt/tomcat/sakai/sakai.properties \
              -v ~/sakai/context.xml:/opt/tomcat/conf/context.xml \
              -v ~/sakai/server.xml:/opt/tomcat/conf/server.xml \
              -v ~/sakai/mysql-connector.jar:/opt/tomcat/lib/mysql-connector.jar \
              ankitosm/sakai:${{ github.event.inputs.branch_name }}

            echo "‚úÖ Deployment complete! Sakai should be running on http://${{ secrets.VPS_HOST }}:8080"
